{"version":3,"sources":["static/depop_logo.png","Likes/index.js","Header/index.js","Item/index.js","ItemsContainer/index.js","Shop/index.js","serviceWorker.js","index.js"],"names":["module","exports","LikesList","likedItems","unlikeItem","className","map","id","title","key","onClick","LikeCount","likes","disabled","Likes","useState","showList","setShowList","useEffect","length","Header","props","src","logo","alt","Item","img","size","price","seller","sold","brand","liked","toggleLike","icon","faHeart","defaultProps","Loading","FilterButton","filters","filter","toggleFilter","label","includes","ItemsContainer","items","loading","setFilters","filteredItems","useMemo","item","filterToRemove","addFilter","Shop","setItems","setLikedItems","setLoading","axios","get","then","res","data","catch","alert","likedItem","itemIsLiked","some","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.64343dd8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/depop_logo.d323bd3c.png\";","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './Likes.css';\n\nexport const LikesList = ({ likedItems, unlikeItem }) => (\n    <ul className=\"likes-list\">\n        {likedItems.map(({ id, title }) => (\n            <li key={id}>\n                <b>{title}</b> <button onClick={() => unlikeItem(id)}>X</button>\n            </li>\n        ))}\n    </ul>\n);\n\nexport const LikeCount = ({ likes, onClick }) => (\n    <button className=\"likes-count\" disabled={likes === 0} onClick={onClick}>\n        {`${likes} Like${likes === 1 ? '' : 's'}`}\n    </button>\n);\n\nconst Likes = ({ likedItems, unlikeItem }) => {\n    const [showList, setShowList] = useState(false);\n\n    useEffect(() => {\n        likedItems.length === 0 && setShowList(false)\n    }, [likedItems]);\n\n    return (\n        <div className=\"likes\">\n            <LikeCount likes={likedItems.length} onClick={() => setShowList(!showList)} />\n            {showList && likedItems.length !== 0 &&\n                <LikesList likedItems={likedItems} unlikeItem={unlikeItem} />}\n        </div>\n    )\n};\n\nLikes.propTypes = {\n    likedItems: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired\n    })).isRequired,\n    unlikeItem: PropTypes.func.isRequired\n};\n\nexport default Likes;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Likes from '../Likes';\nimport logo from '../static/depop_logo.png';\nimport './Header.css';\n\nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            <img className=\"depop-logo\" src={logo} alt=\"depop logo\" />\n            <Likes {...props}/>\n        </div>\n    )\n};\n\nHeader.propTypes = {\n    likedItems: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired\n    })).isRequired,\n    unlikeItem: PropTypes.func.isRequired\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\nimport './Item.css';\n\nconst Item = ({ id, img, title, size, price, seller, sold, brand, liked, toggleLike }) => (\n    <div className=\"item\">\n        <div className=\"item-img-container\">\n        <img className=\"item-img\" alt={title} src={img} />\n        {sold && <div className=\"sold\">SOLD</div>}\n        <button className={`like-button ${liked ? 'liked' : ''}`} onClick={() => toggleLike(id, title)}>\n            <FontAwesomeIcon className=\"heart\" icon={faHeart} />\n        </button>\n        </div>\n        <p><b>{seller}</b> {title}</p>\n        <p>{brand && <span>Brand: <b>{brand}</b></span>} {size && <span>Size: <b>{size}</b></span>}</p>\n        <p>Price <b>{`Â£${price}`}</b></p>\n    </div>\n);\n\nItem.propTypes = {\n    id: PropTypes.number.isRequired,\n    img: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    seller: PropTypes.string.isRequired,\n    sold: PropTypes.bool.isRequired,\n    size: PropTypes.string,\n    brand: PropTypes.string,\n    liked: PropTypes.bool.isRequired,\n    toggleLike: PropTypes.func.isRequired\n}\n\nItem.defaultProps = {\n    size: null,\n    brand: null\n}\n\nexport default Item;","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Item from '../Item';\nimport './ItemsContainer.css';\n\nconst Loading = () => (\n    <div className=\"loader\">\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nexport const FilterButton = ({ filters, filter, toggleFilter, label }) => (\n    <button className={filters.includes(filter) ? 'active' : ''} onClick={() => toggleFilter(filter)}>\n        {label}\n    </button>\n);\n\nconst ItemsContainer = ({ items, loading, toggleLike }) => {\n    const [ filters, setFilters ] = useState([]);\n\n    const filteredItems = useMemo(() => {\n        return items.filter(item => !(\n            (filters.includes('sold') && item.sold !== false) ||\n            (filters.includes('liked') && item.liked === false)\n        ));\n    }, [filters, items]);\n\n    const addFilter = (filter) => setFilters([ ...filters, filter ]);\n\n    const removeFilter = (filterToRemove) => setFilters(filters.filter(filter => filter !== filterToRemove));\n\n    const toggleFilter = (filter) => filters.includes(filter) ? removeFilter(filter) : addFilter(filter);\n\n    const length = loading ? 0 : filteredItems.length;\n\n    return (\n        <div className=\"items-container\">\n            <div className=\"items-header\">\n                <h4 className=\"results-number\">\n                    {`${length} Result${length === 1 ? '' : 's'}`}\n                </h4>\n                <div className=\"filter-buttons\">\n                    <FilterButton\n                        filters={filters}\n                        filter=\"sold\"\n                        toggleFilter={toggleFilter}\n                        label=\"Hide Sold Items\"\n                    />\n                    <FilterButton\n                        filters={filters}\n                        filter=\"liked\"\n                        toggleFilter={toggleFilter}\n                        label=\"Show Liked Items\"\n                    />\n                </div>\n            </div>\n            <div className=\"items-body\">\n                {loading\n                    ? <Loading />\n                    : filteredItems.map(item => <Item key={item.id} toggleLike={toggleLike} {...item}/>)}\n            </div>\n        </div>\n    )\n};\n\nItemsContainer.propTypes = {\n    items: PropTypes.arrayOf(PropTypes.exact({\n        id: PropTypes.number.isRequired,\n        img: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        brand: PropTypes.string,\n        size: PropTypes.string,\n        seller: PropTypes.string.isRequired,\n        sold: PropTypes.bool.isRequired,\n        liked: PropTypes.bool.isRequired\n    })),\n    loading: PropTypes.bool.isRequired,\n    toggleLike: PropTypes.func.isRequired\n}\n\nItemsContainer.defaultProps = {\n    items: []\n}\n\nexport default ItemsContainer;","import React, { useEffect, useState } from 'react';\nimport Header from '../Header';\nimport ItemsContainer from '../ItemsContainer';\nimport axios from 'axios';\n\nconst storeDataNeeded = (data) =>\n    data.map(({ id, title, img, price, brand, size, seller, sold }) =>\n        ({ id, title, img, price, brand, size, seller, sold }));\n\nconst Shop = () => {\n    const [ items, setItems ] = useState([]);\n    const [ likedItems, setLikedItems ] = useState([]);\n    const [ loading, setLoading ] = useState(true);\n\n    useEffect(() => {\n        axios.get('https://5c78274f6810ec00148d0ff1.mockapi.io/api/v1/products')\n            .then(res => {\n                setItems(storeDataNeeded(res.data));\n                setLoading(false);\n            })\n            .catch(() => {\n                alert('There was an error fetching the data. Please refresh the page.')\n            });\n    }, []);\n\n    const unlikeItem = (id) => setLikedItems(likedItems.filter(likedItem => likedItem.id !== id));\n\n    const itemIsLiked = (id) => likedItems.some(likedItem => likedItem.id === id);\n\n    const toggleLike = (id, title) => itemIsLiked(id)\n        ? unlikeItem(id) : setLikedItems([ ...likedItems, { id, title } ]);\n\n    return (\n        <React.Fragment>\n            <Header likedItems={likedItems} unlikeItem={unlikeItem} />\n            <ItemsContainer\n                items={items.map(item => ({ ...item, liked: itemIsLiked(item.id) }))}\n                loading={loading}\n                toggleLike={toggleLike}\n            />\n        </React.Fragment>\n    );\n}\n\nexport default Shop;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            'New content is available and will be used when all ' +\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                        );\n\n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log('Content is cached for offline use.');\n\n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    })\n    .catch(error => {\n        console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n    .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(registration => {\n                registration.unregister().then(() => {\n                    window.location.reload();\n                });\n            });\n        } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n        }\n    })\n    .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n    });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Shop from './Shop';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Shop />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}